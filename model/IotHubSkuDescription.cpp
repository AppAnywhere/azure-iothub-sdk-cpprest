/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IotHubSkuDescription.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IotHubSkuDescription::IotHubSkuDescription()
{
    m_ResourceType = U("");
    m_ResourceTypeIsSet = false;
}

IotHubSkuDescription::~IotHubSkuDescription()
{
}

void IotHubSkuDescription::validate()
{
    // TODO: implement validation
}

web::json::value IotHubSkuDescription::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_ResourceTypeIsSet)
    {
        val[U("resourceType")] = ModelBase::toJson(m_ResourceType);
    }
    val[U("sku")] = ModelBase::toJson(m_Sku);
    val[U("capacity")] = ModelBase::toJson(m_Capacity);

    return val;
}

void IotHubSkuDescription::fromJson(web::json::value& val)
{
    if(val.has_field(U("resourceType")))
    {
        setResourceType(ModelBase::stringFromJson(val[U("resourceType")]));
    }
    std::shared_ptr<IotHubSkuInfo> newSku(new IotHubSkuInfo());
    newSku->fromJson(val[U("sku")]);
    setSku( newSku );
    std::shared_ptr<IotHubCapacity> newCapacity(new IotHubCapacity());
    newCapacity->fromJson(val[U("capacity")]);
    setCapacity( newCapacity );
}

void IotHubSkuDescription::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_ResourceTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("resourceType"), m_ResourceType));
        
    }
    m_Sku->toMultipart(multipart, U("sku."));
    m_Capacity->toMultipart(multipart, U("capacity."));
}

void IotHubSkuDescription::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("resourceType")))
    {
        setResourceType(ModelBase::stringFromHttpContent(multipart->getContent(U("resourceType"))));
    }
    std::shared_ptr<IotHubSkuInfo> newSku(new IotHubSkuInfo());
    newSku->fromMultiPart(multipart, U("sku."));
    setSku( newSku );
    std::shared_ptr<IotHubCapacity> newCapacity(new IotHubCapacity());
    newCapacity->fromMultiPart(multipart, U("capacity."));
    setCapacity( newCapacity );
}

utility::string_t IotHubSkuDescription::getResourceType() const
{
    return m_ResourceType;
}


void IotHubSkuDescription::setResourceType(utility::string_t value)
{
    m_ResourceType = value;
    m_ResourceTypeIsSet = true;
}
bool IotHubSkuDescription::resourceTypeIsSet() const
{
    return m_ResourceTypeIsSet;
}

void IotHubSkuDescription::unsetResourceType()
{
    m_ResourceTypeIsSet = false;
}

std::shared_ptr<IotHubSkuInfo> IotHubSkuDescription::getSku() const
{
    return m_Sku;
}


void IotHubSkuDescription::setSku(std::shared_ptr<IotHubSkuInfo> value)
{
    m_Sku = value;
    
}
std::shared_ptr<IotHubCapacity> IotHubSkuDescription::getCapacity() const
{
    return m_Capacity;
}


void IotHubSkuDescription::setCapacity(std::shared_ptr<IotHubCapacity> value)
{
    m_Capacity = value;
    
}
}
}
}
}

