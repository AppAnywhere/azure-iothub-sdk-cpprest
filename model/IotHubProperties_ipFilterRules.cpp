/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IotHubProperties_ipFilterRules.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IotHubProperties_ipFilterRules::IotHubProperties_ipFilterRules()
{
    m_FilterName = U("");
    m_Action = U("");
    m_IpMask = U("");
    
}

IotHubProperties_ipFilterRules::~IotHubProperties_ipFilterRules()
{
}

void IotHubProperties_ipFilterRules::validate()
{
    // TODO: implement validation
}

web::json::value IotHubProperties_ipFilterRules::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("filterName")] = ModelBase::toJson(m_FilterName);
    val[U("action")] = ModelBase::toJson(m_Action);
    val[U("ipMask")] = ModelBase::toJson(m_IpMask);
    

    return val;
}

void IotHubProperties_ipFilterRules::fromJson(web::json::value& val)
{
    setFilterName(ModelBase::stringFromJson(val[U("filterName")]));
    setAction(ModelBase::stringFromJson(val[U("action")]));
    setIpMask(ModelBase::stringFromJson(val[U("ipMask")]));
    
}

void IotHubProperties_ipFilterRules::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("filterName"), m_FilterName));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("action"), m_Action));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("ipMask"), m_IpMask));
    
}

void IotHubProperties_ipFilterRules::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setFilterName(ModelBase::stringFromHttpContent(multipart->getContent(U("filterName"))));
    setAction(ModelBase::stringFromHttpContent(multipart->getContent(U("action"))));
    setIpMask(ModelBase::stringFromHttpContent(multipart->getContent(U("ipMask"))));
    
}


utility::string_t IotHubProperties_ipFilterRules::getFilterName() const
{
    return m_FilterName;
}
void IotHubProperties_ipFilterRules::setFilterName(utility::string_t value)
{
    m_FilterName = value;
    
}
utility::string_t IotHubProperties_ipFilterRules::getAction() const
{
    return m_Action;
}
void IotHubProperties_ipFilterRules::setAction(utility::string_t value)
{
    m_Action = value;
    
}
utility::string_t IotHubProperties_ipFilterRules::getIpMask() const
{
    return m_IpMask;
}
void IotHubProperties_ipFilterRules::setIpMask(utility::string_t value)
{
    m_IpMask = value;
    
}

}
}
}
}

