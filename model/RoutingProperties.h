/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * RoutingProperties.h
 *
 * The routing related properties of the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
 */

#ifndef RoutingProperties_H_
#define RoutingProperties_H_


#include "ModelBase.h"

#include "RouteProperties.h"
#include "RoutingEndpoints.h"
#include "FallbackRouteProperties.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The routing related properties of the IoT hub. See: https://docs.microsoft.com/azure/iot-hub/iot-hub-devguide-messaging
/// </summary>
class  RoutingProperties
    : public ModelBase
{
public:
    RoutingProperties();
    virtual ~RoutingProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RoutingProperties members

    /// <summary>
    /// 
    /// </summary>
    std::shared_ptr<RoutingEndpoints> getEndpoints() const;
    void setEndpoints(std::shared_ptr<RoutingEndpoints> value);
    bool endpointsIsSet() const;
    void unsetEndpoints();
    /// <summary>
    /// The list of user-provided routing rules that the IoT hub uses to route messages to built-in and custom endpoints. A maximum of 100 routing rules are allowed for paid hubs and a maximum of 5 routing rules are allowed for free hubs.
    /// </summary>
    std::vector<std::shared_ptr<RouteProperties>>& getRoutes();
    bool routesIsSet() const;
    void unsetRoutes();
    /// <summary>
    /// The properties of the route that is used as a fall-back route when none of the conditions specified in the &#39;routes&#39; section are met. This is an optional parameter. When this property is not set, the messages which do not meet any of the conditions specified in the &#39;routes&#39; section get routed to the built-in eventhub endpoint.
    /// </summary>
    std::shared_ptr<FallbackRouteProperties> getFallbackRoute() const;
    void setFallbackRoute(std::shared_ptr<FallbackRouteProperties> value);
    bool fallbackRouteIsSet() const;
    void unsetFallbackRoute();

protected:
    std::shared_ptr<RoutingEndpoints> m_Endpoints;
    bool m_EndpointsIsSet;
    std::vector<std::shared_ptr<RouteProperties>> m_Routes;
    bool m_RoutesIsSet;
    std::shared_ptr<FallbackRouteProperties> m_FallbackRoute;
    bool m_FallbackRouteIsSet;
};

}
}
}
}

#endif /* RoutingProperties_H_ */
