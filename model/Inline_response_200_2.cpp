/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Inline_response_200_2.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Inline_response_200_2::Inline_response_200_2()
{
    m_TotalDeviceCount = 0;
    m_TotalDeviceCountIsSet = false;
    m_EnabledDeviceCount = 0;
    m_EnabledDeviceCountIsSet = false;
    m_DisabledDeviceCount = 0;
    m_DisabledDeviceCountIsSet = false;
    
}

Inline_response_200_2::~Inline_response_200_2()
{
}

void Inline_response_200_2::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200_2::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_TotalDeviceCountIsSet)
    {
        val[U("totalDeviceCount")] = ModelBase::toJson(m_TotalDeviceCount);
    }
    if(m_EnabledDeviceCountIsSet)
    {
        val[U("enabledDeviceCount")] = ModelBase::toJson(m_EnabledDeviceCount);
    }
    if(m_DisabledDeviceCountIsSet)
    {
        val[U("disabledDeviceCount")] = ModelBase::toJson(m_DisabledDeviceCount);
    }
    

    return val;
}

void Inline_response_200_2::fromJson(web::json::value& val)
{
    if(val.has_field(U("totalDeviceCount")))
    {
        setTotalDeviceCount(ModelBase::int64_tFromJson(val[U("totalDeviceCount")]));
    }
    if(val.has_field(U("enabledDeviceCount")))
    {
        setEnabledDeviceCount(ModelBase::int64_tFromJson(val[U("enabledDeviceCount")]));
    }
    if(val.has_field(U("disabledDeviceCount")))
    {
        setDisabledDeviceCount(ModelBase::int64_tFromJson(val[U("disabledDeviceCount")]));
    }
    
}

void Inline_response_200_2::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_TotalDeviceCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("totalDeviceCount"), m_TotalDeviceCount));
    }
    if(m_EnabledDeviceCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("enabledDeviceCount"), m_EnabledDeviceCount));
    }
    if(m_DisabledDeviceCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("disabledDeviceCount"), m_DisabledDeviceCount));
    }
    
}

void Inline_response_200_2::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("totalDeviceCount")))
    {
        setTotalDeviceCount(ModelBase::int64_tFromHttpContent(multipart->getContent(U("totalDeviceCount"))));
    }
    if(multipart->hasContent(U("enabledDeviceCount")))
    {
        setEnabledDeviceCount(ModelBase::int64_tFromHttpContent(multipart->getContent(U("enabledDeviceCount"))));
    }
    if(multipart->hasContent(U("disabledDeviceCount")))
    {
        setDisabledDeviceCount(ModelBase::int64_tFromHttpContent(multipart->getContent(U("disabledDeviceCount"))));
    }
    
}


int64_t Inline_response_200_2::getTotalDeviceCount() const
{
    return m_TotalDeviceCount;
}
void Inline_response_200_2::setTotalDeviceCount(int64_t value)
{
    m_TotalDeviceCount = value;
    m_TotalDeviceCountIsSet = true;
}
bool Inline_response_200_2::totalDeviceCountIsSet() const
{
    return m_TotalDeviceCountIsSet;
}
void Inline_response_200_2::unsetTotalDeviceCount()
{
    m_TotalDeviceCountIsSet = false;
}
int64_t Inline_response_200_2::getEnabledDeviceCount() const
{
    return m_EnabledDeviceCount;
}
void Inline_response_200_2::setEnabledDeviceCount(int64_t value)
{
    m_EnabledDeviceCount = value;
    m_EnabledDeviceCountIsSet = true;
}
bool Inline_response_200_2::enabledDeviceCountIsSet() const
{
    return m_EnabledDeviceCountIsSet;
}
void Inline_response_200_2::unsetEnabledDeviceCount()
{
    m_EnabledDeviceCountIsSet = false;
}
int64_t Inline_response_200_2::getDisabledDeviceCount() const
{
    return m_DisabledDeviceCount;
}
void Inline_response_200_2::setDisabledDeviceCount(int64_t value)
{
    m_DisabledDeviceCount = value;
    m_DisabledDeviceCountIsSet = true;
}
bool Inline_response_200_2::disabledDeviceCountIsSet() const
{
    return m_DisabledDeviceCountIsSet;
}
void Inline_response_200_2::unsetDisabledDeviceCount()
{
    m_DisabledDeviceCountIsSet = false;
}

}
}
}
}

