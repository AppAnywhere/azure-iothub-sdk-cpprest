/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * Inline_response_200_9_value.h
 *
 * The properties of an IoT hub shared access policy.
 */

#ifndef Inline_response_200_9_value_H_
#define Inline_response_200_9_value_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The properties of an IoT hub shared access policy.
/// </summary>
class  Inline_response_200_9_value
    : public ModelBase
{
public:
    Inline_response_200_9_value();
    virtual ~Inline_response_200_9_value();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// Inline_response_200_9_value members

    /// <summary>
    /// The name of the shared access policy.
    /// </summary>
    utility::string_t getKeyName() const;
    void setKeyName(utility::string_t value);
        /// <summary>
    /// The primary key.
    /// </summary>
    utility::string_t getPrimaryKey() const;
    void setPrimaryKey(utility::string_t value);
    bool primaryKeyIsSet() const;
    void unsetPrimaryKey();
    /// <summary>
    /// The secondary key.
    /// </summary>
    utility::string_t getSecondaryKey() const;
    void setSecondaryKey(utility::string_t value);
    bool secondaryKeyIsSet() const;
    void unsetSecondaryKey();
    /// <summary>
    /// The permissions assigned to the shared access policy.
    /// </summary>
    utility::string_t getRights() const;
    void setRights(utility::string_t value);
    
protected:
    utility::string_t m_KeyName;
    utility::string_t m_PrimaryKey;
    bool m_PrimaryKeyIsSet;
utility::string_t m_SecondaryKey;
    bool m_SecondaryKeyIsSet;
utility::string_t m_Rights;
    };

}
}
}
}

#endif /* Inline_response_200_9_value_H_ */
