/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IotHubProperties_routing_endpoints_eventHubs.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IotHubProperties_routing_endpoints_eventHubs::IotHubProperties_routing_endpoints_eventHubs()
{
    m_ConnectionString = U("");
    m_Name = U("");
    m_SubscriptionId = U("");
    m_SubscriptionIdIsSet = false;
    m_ResourceGroup = U("");
    m_ResourceGroupIsSet = false;
    
}

IotHubProperties_routing_endpoints_eventHubs::~IotHubProperties_routing_endpoints_eventHubs()
{
}

void IotHubProperties_routing_endpoints_eventHubs::validate()
{
    // TODO: implement validation
}

web::json::value IotHubProperties_routing_endpoints_eventHubs::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("connectionString")] = ModelBase::toJson(m_ConnectionString);
    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_SubscriptionIdIsSet)
    {
        val[U("subscriptionId")] = ModelBase::toJson(m_SubscriptionId);
    }
    if(m_ResourceGroupIsSet)
    {
        val[U("resourceGroup")] = ModelBase::toJson(m_ResourceGroup);
    }
    

    return val;
}

void IotHubProperties_routing_endpoints_eventHubs::fromJson(web::json::value& val)
{
    setConnectionString(ModelBase::stringFromJson(val[U("connectionString")]));
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("subscriptionId")))
    {
        setSubscriptionId(ModelBase::stringFromJson(val[U("subscriptionId")]));
        
    }
    if(val.has_field(U("resourceGroup")))
    {
        setResourceGroup(ModelBase::stringFromJson(val[U("resourceGroup")]));
        
    }
    
}

void IotHubProperties_routing_endpoints_eventHubs::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("connectionString"), m_ConnectionString));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_SubscriptionIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("subscriptionId"), m_SubscriptionId));
        
    }
    if(m_ResourceGroupIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("resourceGroup"), m_ResourceGroup));
        
    }
    
}

void IotHubProperties_routing_endpoints_eventHubs::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setConnectionString(ModelBase::stringFromHttpContent(multipart->getContent(U("connectionString"))));
    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("subscriptionId")))
    {
        setSubscriptionId(ModelBase::stringFromHttpContent(multipart->getContent(U("subscriptionId"))));
        
    }
    if(multipart->hasContent(U("resourceGroup")))
    {
        setResourceGroup(ModelBase::stringFromHttpContent(multipart->getContent(U("resourceGroup"))));
        
    }
    
}


utility::string_t IotHubProperties_routing_endpoints_eventHubs::getConnectionString() const
{
    return m_ConnectionString;
}
void IotHubProperties_routing_endpoints_eventHubs::setConnectionString(utility::string_t value)
{
    m_ConnectionString = value;
    
}
utility::string_t IotHubProperties_routing_endpoints_eventHubs::getName() const
{
    return m_Name;
}
void IotHubProperties_routing_endpoints_eventHubs::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t IotHubProperties_routing_endpoints_eventHubs::getSubscriptionId() const
{
    return m_SubscriptionId;
}
void IotHubProperties_routing_endpoints_eventHubs::setSubscriptionId(utility::string_t value)
{
    m_SubscriptionId = value;
    m_SubscriptionIdIsSet = true;
}
bool IotHubProperties_routing_endpoints_eventHubs::subscriptionIdIsSet() const
{
    return m_SubscriptionIdIsSet;
}
void IotHubProperties_routing_endpoints_eventHubs::unsetSubscriptionId()
{
    m_SubscriptionIdIsSet = false;
}
utility::string_t IotHubProperties_routing_endpoints_eventHubs::getResourceGroup() const
{
    return m_ResourceGroup;
}
void IotHubProperties_routing_endpoints_eventHubs::setResourceGroup(utility::string_t value)
{
    m_ResourceGroup = value;
    m_ResourceGroupIsSet = true;
}
bool IotHubProperties_routing_endpoints_eventHubs::resourceGroupIsSet() const
{
    return m_ResourceGroupIsSet;
}
void IotHubProperties_routing_endpoints_eventHubs::unsetResourceGroup()
{
    m_ResourceGroupIsSet = false;
}

}
}
}
}

