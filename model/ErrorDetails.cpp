/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ErrorDetails.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ErrorDetails::ErrorDetails()
{
    m_Code = U("");
    m_CodeIsSet = false;
    m_HttpStatusCode = U("");
    m_HttpStatusCodeIsSet = false;
    m_Message = U("");
    m_MessageIsSet = false;
    m_Details = U("");
    m_DetailsIsSet = false;
    
}

ErrorDetails::~ErrorDetails()
{
}

void ErrorDetails::validate()
{
    // TODO: implement validation
}

web::json::value ErrorDetails::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_CodeIsSet)
    {
        val[U("Code")] = ModelBase::toJson(m_Code);
    }
    if(m_HttpStatusCodeIsSet)
    {
        val[U("HttpStatusCode")] = ModelBase::toJson(m_HttpStatusCode);
    }
    if(m_MessageIsSet)
    {
        val[U("Message")] = ModelBase::toJson(m_Message);
    }
    if(m_DetailsIsSet)
    {
        val[U("Details")] = ModelBase::toJson(m_Details);
    }
    

    return val;
}

void ErrorDetails::fromJson(web::json::value& val)
{
    if(val.has_field(U("Code")))
    {
        setCode(ModelBase::stringFromJson(val[U("Code")]));
        
    }
    if(val.has_field(U("HttpStatusCode")))
    {
        setHttpStatusCode(ModelBase::stringFromJson(val[U("HttpStatusCode")]));
        
    }
    if(val.has_field(U("Message")))
    {
        setMessage(ModelBase::stringFromJson(val[U("Message")]));
        
    }
    if(val.has_field(U("Details")))
    {
        setDetails(ModelBase::stringFromJson(val[U("Details")]));
        
    }
    
}

void ErrorDetails::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_CodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Code"), m_Code));
        
    }
    if(m_HttpStatusCodeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("HttpStatusCode"), m_HttpStatusCode));
        
    }
    if(m_MessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Message"), m_Message));
        
    }
    if(m_DetailsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Details"), m_Details));
        
    }
    
}

void ErrorDetails::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("Code")))
    {
        setCode(ModelBase::stringFromHttpContent(multipart->getContent(U("Code"))));
        
    }
    if(multipart->hasContent(U("HttpStatusCode")))
    {
        setHttpStatusCode(ModelBase::stringFromHttpContent(multipart->getContent(U("HttpStatusCode"))));
        
    }
    if(multipart->hasContent(U("Message")))
    {
        setMessage(ModelBase::stringFromHttpContent(multipart->getContent(U("Message"))));
        
    }
    if(multipart->hasContent(U("Details")))
    {
        setDetails(ModelBase::stringFromHttpContent(multipart->getContent(U("Details"))));
        
    }
    
}


utility::string_t ErrorDetails::getCode() const
{
    return m_Code;
}
void ErrorDetails::setCode(utility::string_t value)
{
    m_Code = value;
    m_CodeIsSet = true;
}
bool ErrorDetails::CodeIsSet() const
{
    return m_CodeIsSet;
}
void ErrorDetails::unsetCode()
{
    m_CodeIsSet = false;
}
utility::string_t ErrorDetails::getHttpStatusCode() const
{
    return m_HttpStatusCode;
}
void ErrorDetails::setHttpStatusCode(utility::string_t value)
{
    m_HttpStatusCode = value;
    m_HttpStatusCodeIsSet = true;
}
bool ErrorDetails::HttpStatusCodeIsSet() const
{
    return m_HttpStatusCodeIsSet;
}
void ErrorDetails::unsetHttpStatusCode()
{
    m_HttpStatusCodeIsSet = false;
}
utility::string_t ErrorDetails::getMessage() const
{
    return m_Message;
}
void ErrorDetails::setMessage(utility::string_t value)
{
    m_Message = value;
    m_MessageIsSet = true;
}
bool ErrorDetails::MessageIsSet() const
{
    return m_MessageIsSet;
}
void ErrorDetails::unsetMessage()
{
    m_MessageIsSet = false;
}
utility::string_t ErrorDetails::getDetails() const
{
    return m_Details;
}
void ErrorDetails::setDetails(utility::string_t value)
{
    m_Details = value;
    m_DetailsIsSet = true;
}
bool ErrorDetails::DetailsIsSet() const
{
    return m_DetailsIsSet;
}
void ErrorDetails::unsetDetails()
{
    m_DetailsIsSet = false;
}

}
}
}
}

