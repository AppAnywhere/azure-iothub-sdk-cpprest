/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * OperationsMonitoringProperties.h
 *
 * The operations monitoring properties for the IoT hub. The possible keys to the dictionary are Connections, DeviceTelemetry, C2DCommands, DeviceIdentityOperations, FileUploadOperations, Routes, D2CTwinOperations, C2DTwinOperations, TwinQueries, JobsOperations, DirectMethods.
 */

#ifndef OperationsMonitoringProperties_H_
#define OperationsMonitoringProperties_H_


#include "ModelBase.h"

#include <cpprest/details/basic_types.h>
#include <map>
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The operations monitoring properties for the IoT hub. The possible keys to the dictionary are Connections, DeviceTelemetry, C2DCommands, DeviceIdentityOperations, FileUploadOperations, Routes, D2CTwinOperations, C2DTwinOperations, TwinQueries, JobsOperations, DirectMethods.
/// </summary>
class  OperationsMonitoringProperties
    : public ModelBase
{
public:
    OperationsMonitoringProperties();
    virtual ~OperationsMonitoringProperties();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// OperationsMonitoringProperties members

    /// <summary>
    /// 
    /// </summary>
    std::map<utility::string_t, utility::string_t>& getEvents();
    bool eventsIsSet() const;
    void unsetEvents();
    void setEvents(std::map<utility::string_t, utility::string_t> value);

protected:
    std::map<utility::string_t, utility::string_t> m_Events;
    bool m_EventsIsSet;
};

}
}
}
}

#endif /* OperationsMonitoringProperties_H_ */
