/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OperationsMonitoringProperties.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

OperationsMonitoringProperties::OperationsMonitoringProperties()
{
    m_EventsIsSet = false;
}

OperationsMonitoringProperties::~OperationsMonitoringProperties()
{
}

void OperationsMonitoringProperties::validate()
{
    // TODO: implement validation
}

web::json::value OperationsMonitoringProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Events )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first());
            tmp[U("value")] = ModelBase::toJson(item.second());
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("events")] = web::json::value::array(jsonArray);
        }
    }

    return val;
}

void OperationsMonitoringProperties::fromJson(web::json::value& val)
{
    {
        m_Events.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("events")))
        {
        for( auto& item : val[U("events")].as_array() )
        {  
            utility::string_t key = "";
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            m_Events.insert(std::pair<utility::string_t,utility::string_t>( key, ModelBase::stringFromJson(item[U("value")])));
        }
        }
    }
}

void OperationsMonitoringProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_Events )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first());
            tmp[U("value")] = ModelBase::toJson(item.second());
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("events"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
}

void OperationsMonitoringProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_Events.clear();
        if(multipart->hasContent(U("events")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("events"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key = "";
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            m_Events.insert(std::pair<utility::string_t,utility::string_t>( key, ModelBase::stringFromJson(item[U("value")])));
        }
        }
    }
}

std::map<utility::string_t, utility::string_t>& OperationsMonitoringProperties::getEvents()
{
    return m_Events;
}

void OperationsMonitoringProperties::setEvents(std::map<utility::string_t, utility::string_t> value)
{
    m_Events = value;
    m_EventsIsSet = true;
}
bool OperationsMonitoringProperties::eventsIsSet() const
{
    return m_EventsIsSet;
}

void OperationsMonitoringProperties::unsetEvents()
{
    m_EventsIsSet = false;
}

}
}
}
}

