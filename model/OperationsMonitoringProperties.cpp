/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "OperationsMonitoringProperties.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

OperationsMonitoringProperties::OperationsMonitoringProperties()
{
    m_EventsIsSet = false;
    
}

OperationsMonitoringProperties::~OperationsMonitoringProperties()
{
}

void OperationsMonitoringProperties::validate()
{
    // TODO: implement validation
}

web::json::value OperationsMonitoringProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_EventsIsSet)
    {
        val[U("events")] = ModelBase::toJson(m_Events);
    }
    

    return val;
}

void OperationsMonitoringProperties::fromJson(web::json::value& val)
{
    if(val.has_field(U("events")))
    {
        if(!val[U("events")].is_null())
        {
            std::map<utility::string_t, utility::string_t> newItem(std::map<utility::string_t, InnerEnum>());
            newItem->fromJson(val[U("events")]);
            setEvents( newItem );
        }
        
    }
    
}

void OperationsMonitoringProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_EventsIsSet)
    {
        if (m_Events.get())
        {
            m_Events->toMultipart(multipart, U("events."));
        }
        
    }
    
}

void OperationsMonitoringProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("events")))
    {
        if(multipart->hasContent(U("events")))
        {
            std::map<utility::string_t, utility::string_t> newItem(std::map<utility::string_t, InnerEnum>());
            newItem->fromMultiPart(multipart, U("events."));
            setEvents( newItem );
        }
        
    }
    
}


std::map<utility::string_t, utility::string_t>& OperationsMonitoringProperties::getEvents()
{
    return m_Events;
}
bool OperationsMonitoringProperties::eventsIsSet() const
{
    return m_EventsIsSet;
}
void OperationsMonitoringProperties::unsetEvents()
{
    m_EventsIsSet = false;
}

}
}
}
}

