/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Inline_response_200_3_capacity.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Inline_response_200_3_capacity::Inline_response_200_3_capacity()
{
    m_Minimum = 0;
    m_MinimumIsSet = false;
    m_Maximum = 0;
    m_MaximumIsSet = false;
    m_Default = 0;
    m_DefaultIsSet = false;
    m_ScaleType = U("");
    m_ScaleTypeIsSet = false;
    
}

Inline_response_200_3_capacity::~Inline_response_200_3_capacity()
{
}

void Inline_response_200_3_capacity::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200_3_capacity::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MinimumIsSet)
    {
        val[U("minimum")] = ModelBase::toJson(m_Minimum);
    }
    if(m_MaximumIsSet)
    {
        val[U("maximum")] = ModelBase::toJson(m_Maximum);
    }
    if(m_DefaultIsSet)
    {
        val[U("default")] = ModelBase::toJson(m_Default);
    }
    if(m_ScaleTypeIsSet)
    {
        val[U("scaleType")] = ModelBase::toJson(m_ScaleType);
    }
    

    return val;
}

void Inline_response_200_3_capacity::fromJson(web::json::value& val)
{
    if(val.has_field(U("minimum")))
    {
        setMinimum(ModelBase::int64_tFromJson(val[U("minimum")]));
    }
    if(val.has_field(U("maximum")))
    {
        setMaximum(ModelBase::int64_tFromJson(val[U("maximum")]));
    }
    if(val.has_field(U("default")))
    {
        setDefault(ModelBase::int64_tFromJson(val[U("default")]));
    }
    if(val.has_field(U("scaleType")))
    {
        setScaleType(ModelBase::stringFromJson(val[U("scaleType")]));
        
    }
    
}

void Inline_response_200_3_capacity::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_MinimumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("minimum"), m_Minimum));
    }
    if(m_MaximumIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("maximum"), m_Maximum));
    }
    if(m_DefaultIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("default"), m_Default));
    }
    if(m_ScaleTypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("scaleType"), m_ScaleType));
        
    }
    
}

void Inline_response_200_3_capacity::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("minimum")))
    {
        setMinimum(ModelBase::int64_tFromHttpContent(multipart->getContent(U("minimum"))));
    }
    if(multipart->hasContent(U("maximum")))
    {
        setMaximum(ModelBase::int64_tFromHttpContent(multipart->getContent(U("maximum"))));
    }
    if(multipart->hasContent(U("default")))
    {
        setDefault(ModelBase::int64_tFromHttpContent(multipart->getContent(U("default"))));
    }
    if(multipart->hasContent(U("scaleType")))
    {
        setScaleType(ModelBase::stringFromHttpContent(multipart->getContent(U("scaleType"))));
        
    }
    
}


int64_t Inline_response_200_3_capacity::getMinimum() const
{
    return m_Minimum;
}
void Inline_response_200_3_capacity::setMinimum(int64_t value)
{
    m_Minimum = value;
    m_MinimumIsSet = true;
}
bool Inline_response_200_3_capacity::minimumIsSet() const
{
    return m_MinimumIsSet;
}
void Inline_response_200_3_capacity::unsetMinimum()
{
    m_MinimumIsSet = false;
}
int64_t Inline_response_200_3_capacity::getMaximum() const
{
    return m_Maximum;
}
void Inline_response_200_3_capacity::setMaximum(int64_t value)
{
    m_Maximum = value;
    m_MaximumIsSet = true;
}
bool Inline_response_200_3_capacity::maximumIsSet() const
{
    return m_MaximumIsSet;
}
void Inline_response_200_3_capacity::unsetMaximum()
{
    m_MaximumIsSet = false;
}
int64_t Inline_response_200_3_capacity::getDefault() const
{
    return m_Default;
}
void Inline_response_200_3_capacity::setDefault(int64_t value)
{
    m_Default = value;
    m_DefaultIsSet = true;
}
bool Inline_response_200_3_capacity::defaultIsSet() const
{
    return m_DefaultIsSet;
}
void Inline_response_200_3_capacity::unsetDefault()
{
    m_DefaultIsSet = false;
}
utility::string_t Inline_response_200_3_capacity::getScaleType() const
{
    return m_ScaleType;
}
void Inline_response_200_3_capacity::setScaleType(utility::string_t value)
{
    m_ScaleType = value;
    m_ScaleTypeIsSet = true;
}
bool Inline_response_200_3_capacity::scaleTypeIsSet() const
{
    return m_ScaleTypeIsSet;
}
void Inline_response_200_3_capacity::unsetScaleType()
{
    m_ScaleTypeIsSet = false;
}

}
}
}
}

