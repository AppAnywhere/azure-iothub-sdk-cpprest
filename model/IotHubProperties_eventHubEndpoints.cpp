/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IotHubProperties_eventHubEndpoints.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IotHubProperties_eventHubEndpoints::IotHubProperties_eventHubEndpoints()
{
    m_RetentionTimeInDays = 0;
    m_RetentionTimeInDaysIsSet = false;
    m_PartitionCount = 0;
    m_PartitionCountIsSet = false;
    m_PartitionIdsIsSet = false;
    m_Path = U("");
    m_PathIsSet = false;
    m_Endpoint = U("");
    m_EndpointIsSet = false;
    
}

IotHubProperties_eventHubEndpoints::~IotHubProperties_eventHubEndpoints()
{
}

void IotHubProperties_eventHubEndpoints::validate()
{
    // TODO: implement validation
}

web::json::value IotHubProperties_eventHubEndpoints::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_RetentionTimeInDaysIsSet)
    {
        val[U("retentionTimeInDays")] = ModelBase::toJson(m_RetentionTimeInDays);
    }
    if(m_PartitionCountIsSet)
    {
        val[U("partitionCount")] = ModelBase::toJson(m_PartitionCount);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PartitionIds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            val[U("partitionIds")] = web::json::value::array(jsonArray);
        }
    }
    if(m_PathIsSet)
    {
        val[U("path")] = ModelBase::toJson(m_Path);
    }
    if(m_EndpointIsSet)
    {
        val[U("endpoint")] = ModelBase::toJson(m_Endpoint);
    }
    

    return val;
}

void IotHubProperties_eventHubEndpoints::fromJson(web::json::value& val)
{
    if(val.has_field(U("retentionTimeInDays")))
    {
        setRetentionTimeInDays(ModelBase::int64_tFromJson(val[U("retentionTimeInDays")]));
    }
    if(val.has_field(U("partitionCount")))
    {
        setPartitionCount(ModelBase::int32_tFromJson(val[U("partitionCount")]));
    }
    {
        m_PartitionIds.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("partitionIds")))
        {
        for( auto& item : val[U("partitionIds")].as_array() )
        {
            m_PartitionIds.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(val.has_field(U("path")))
    {
        setPath(ModelBase::stringFromJson(val[U("path")]));
        
    }
    if(val.has_field(U("endpoint")))
    {
        setEndpoint(ModelBase::stringFromJson(val[U("endpoint")]));
        
    }
    
}

void IotHubProperties_eventHubEndpoints::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_RetentionTimeInDaysIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("retentionTimeInDays"), m_RetentionTimeInDays));
    }
    if(m_PartitionCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("partitionCount"), m_PartitionCount));
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_PartitionIds )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("partitionIds"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_PathIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("path"), m_Path));
        
    }
    if(m_EndpointIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("endpoint"), m_Endpoint));
        
    }
    
}

void IotHubProperties_eventHubEndpoints::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("retentionTimeInDays")))
    {
        setRetentionTimeInDays(ModelBase::int64_tFromHttpContent(multipart->getContent(U("retentionTimeInDays"))));
    }
    if(multipart->hasContent(U("partitionCount")))
    {
        setPartitionCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("partitionCount"))));
    }
    {
        m_PartitionIds.clear();
        if(multipart->hasContent(U("partitionIds")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("partitionIds"))));
        for( auto& item : jsonArray.as_array() )
        {
            m_PartitionIds.push_back(ModelBase::stringFromJson(item));
            
        }
        }
    }
    if(multipart->hasContent(U("path")))
    {
        setPath(ModelBase::stringFromHttpContent(multipart->getContent(U("path"))));
        
    }
    if(multipart->hasContent(U("endpoint")))
    {
        setEndpoint(ModelBase::stringFromHttpContent(multipart->getContent(U("endpoint"))));
        
    }
    
}


int64_t IotHubProperties_eventHubEndpoints::getRetentionTimeInDays() const
{
    return m_RetentionTimeInDays;
}
void IotHubProperties_eventHubEndpoints::setRetentionTimeInDays(int64_t value)
{
    m_RetentionTimeInDays = value;
    m_RetentionTimeInDaysIsSet = true;
}
bool IotHubProperties_eventHubEndpoints::retentionTimeInDaysIsSet() const
{
    return m_RetentionTimeInDaysIsSet;
}
void IotHubProperties_eventHubEndpoints::unsetRetentionTimeInDays()
{
    m_RetentionTimeInDaysIsSet = false;
}
int32_t IotHubProperties_eventHubEndpoints::getPartitionCount() const
{
    return m_PartitionCount;
}
void IotHubProperties_eventHubEndpoints::setPartitionCount(int32_t value)
{
    m_PartitionCount = value;
    m_PartitionCountIsSet = true;
}
bool IotHubProperties_eventHubEndpoints::partitionCountIsSet() const
{
    return m_PartitionCountIsSet;
}
void IotHubProperties_eventHubEndpoints::unsetPartitionCount()
{
    m_PartitionCountIsSet = false;
}
std::vector<utility::string_t>& IotHubProperties_eventHubEndpoints::getPartitionIds()
{
    return m_PartitionIds;
}
bool IotHubProperties_eventHubEndpoints::partitionIdsIsSet() const
{
    return m_PartitionIdsIsSet;
}
void IotHubProperties_eventHubEndpoints::unsetPartitionIds()
{
    m_PartitionIdsIsSet = false;
}
utility::string_t IotHubProperties_eventHubEndpoints::getPath() const
{
    return m_Path;
}
void IotHubProperties_eventHubEndpoints::setPath(utility::string_t value)
{
    m_Path = value;
    m_PathIsSet = true;
}
bool IotHubProperties_eventHubEndpoints::pathIsSet() const
{
    return m_PathIsSet;
}
void IotHubProperties_eventHubEndpoints::unsetPath()
{
    m_PathIsSet = false;
}
utility::string_t IotHubProperties_eventHubEndpoints::getEndpoint() const
{
    return m_Endpoint;
}
void IotHubProperties_eventHubEndpoints::setEndpoint(utility::string_t value)
{
    m_Endpoint = value;
    m_EndpointIsSet = true;
}
bool IotHubProperties_eventHubEndpoints::endpointIsSet() const
{
    return m_EndpointIsSet;
}
void IotHubProperties_eventHubEndpoints::unsetEndpoint()
{
    m_EndpointIsSet = false;
}

}
}
}
}

