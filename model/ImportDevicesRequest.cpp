/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ImportDevicesRequest.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ImportDevicesRequest::ImportDevicesRequest()
{
    m_InputBlobContainerUri = U("");
    m_OutputBlobContainerUri = U("");
    
}

ImportDevicesRequest::~ImportDevicesRequest()
{
}

void ImportDevicesRequest::validate()
{
    // TODO: implement validation
}

web::json::value ImportDevicesRequest::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("InputBlobContainerUri")] = ModelBase::toJson(m_InputBlobContainerUri);
    val[U("OutputBlobContainerUri")] = ModelBase::toJson(m_OutputBlobContainerUri);
    

    return val;
}

void ImportDevicesRequest::fromJson(web::json::value& val)
{
    setInputBlobContainerUri(ModelBase::stringFromJson(val[U("InputBlobContainerUri")]));
    setOutputBlobContainerUri(ModelBase::stringFromJson(val[U("OutputBlobContainerUri")]));
    
}

void ImportDevicesRequest::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("InputBlobContainerUri"), m_InputBlobContainerUri));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("OutputBlobContainerUri"), m_OutputBlobContainerUri));
    
}

void ImportDevicesRequest::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setInputBlobContainerUri(ModelBase::stringFromHttpContent(multipart->getContent(U("InputBlobContainerUri"))));
    setOutputBlobContainerUri(ModelBase::stringFromHttpContent(multipart->getContent(U("OutputBlobContainerUri"))));
    
}


utility::string_t ImportDevicesRequest::getInputBlobContainerUri() const
{
    return m_InputBlobContainerUri;
}
void ImportDevicesRequest::setInputBlobContainerUri(utility::string_t value)
{
    m_InputBlobContainerUri = value;
    
}
utility::string_t ImportDevicesRequest::getOutputBlobContainerUri() const
{
    return m_OutputBlobContainerUri;
}
void ImportDevicesRequest::setOutputBlobContainerUri(utility::string_t value)
{
    m_OutputBlobContainerUri = value;
    
}

}
}
}
}

