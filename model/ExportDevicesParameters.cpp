/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "ExportDevicesParameters.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

ExportDevicesParameters::ExportDevicesParameters()
{
    m_ExportBlobContainerUri = U("");
    m_ExcludeKeys = false;
    
}

ExportDevicesParameters::~ExportDevicesParameters()
{
}

void ExportDevicesParameters::validate()
{
    // TODO: implement validation
}

web::json::value ExportDevicesParameters::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("ExportBlobContainerUri")] = ModelBase::toJson(m_ExportBlobContainerUri);
    val[U("ExcludeKeys")] = ModelBase::toJson(m_ExcludeKeys);
    

    return val;
}

void ExportDevicesParameters::fromJson(web::json::value& val)
{
    setExportBlobContainerUri(ModelBase::stringFromJson(val[U("ExportBlobContainerUri")]));
    setExcludeKeys(ModelBase::boolFromJson(val[U("ExcludeKeys")]));
    
}

void ExportDevicesParameters::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("ExportBlobContainerUri"), m_ExportBlobContainerUri));
    multipart->add(ModelBase::toHttpContent(namePrefix + U("ExcludeKeys"), m_ExcludeKeys));
    
}

void ExportDevicesParameters::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setExportBlobContainerUri(ModelBase::stringFromHttpContent(multipart->getContent(U("ExportBlobContainerUri"))));
    setExcludeKeys(ModelBase::boolFromHttpContent(multipart->getContent(U("ExcludeKeys"))));
    
}


utility::string_t ExportDevicesParameters::getExportBlobContainerUri() const
{
    return m_ExportBlobContainerUri;
}
void ExportDevicesParameters::setExportBlobContainerUri(utility::string_t value)
{
    m_ExportBlobContainerUri = value;
    
}
bool ExportDevicesParameters::getExcludeKeys() const
{
    return m_ExcludeKeys;
}
void ExportDevicesParameters::setExcludeKeys(bool value)
{
    m_ExcludeKeys = value;
    
}

}
}
}
}

