/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Inline_response_200_3_sku.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Inline_response_200_3_sku::Inline_response_200_3_sku()
{
    m_Name = U("");
    m_Tier = U("");
    m_TierIsSet = false;
    m_Capacity = 0;
    
}

Inline_response_200_3_sku::~Inline_response_200_3_sku()
{
}

void Inline_response_200_3_sku::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200_3_sku::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("name")] = ModelBase::toJson(m_Name);
    if(m_TierIsSet)
    {
        val[U("tier")] = ModelBase::toJson(m_Tier);
    }
    val[U("capacity")] = ModelBase::toJson(m_Capacity);
    

    return val;
}

void Inline_response_200_3_sku::fromJson(web::json::value& val)
{
    setName(ModelBase::stringFromJson(val[U("name")]));
    if(val.has_field(U("tier")))
    {
        setTier(ModelBase::stringFromJson(val[U("tier")]));
        
    }
    setCapacity(ModelBase::int64_tFromJson(val[U("capacity")]));
    
}

void Inline_response_200_3_sku::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("name"), m_Name));
    if(m_TierIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("tier"), m_Tier));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("capacity"), m_Capacity));
    
}

void Inline_response_200_3_sku::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setName(ModelBase::stringFromHttpContent(multipart->getContent(U("name"))));
    if(multipart->hasContent(U("tier")))
    {
        setTier(ModelBase::stringFromHttpContent(multipart->getContent(U("tier"))));
        
    }
    setCapacity(ModelBase::int64_tFromHttpContent(multipart->getContent(U("capacity"))));
    
}


utility::string_t Inline_response_200_3_sku::getName() const
{
    return m_Name;
}
void Inline_response_200_3_sku::setName(utility::string_t value)
{
    m_Name = value;
    
}
utility::string_t Inline_response_200_3_sku::getTier() const
{
    return m_Tier;
}
void Inline_response_200_3_sku::setTier(utility::string_t value)
{
    m_Tier = value;
    m_TierIsSet = true;
}
bool Inline_response_200_3_sku::tierIsSet() const
{
    return m_TierIsSet;
}
void Inline_response_200_3_sku::unsetTier()
{
    m_TierIsSet = false;
}
int64_t Inline_response_200_3_sku::getCapacity() const
{
    return m_Capacity;
}
void Inline_response_200_3_sku::setCapacity(int64_t value)
{
    m_Capacity = value;
    
}

}
}
}
}

