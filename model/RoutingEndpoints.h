/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

/*
 * RoutingEndpoints.h
 *
 * The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is allowed across all endpoint types for free hubs.
 */

#ifndef RoutingEndpoints_H_
#define RoutingEndpoints_H_


#include "ModelBase.h"

#include "RoutingEventHubProperties.h"
#include "RoutingServiceBusQueueEndpointProperties.h"
#include "RoutingServiceBusTopicEndpointProperties.h"
#include <vector>

namespace io {
namespace swagger {
namespace client {
namespace model {

/// <summary>
/// The properties related to the custom endpoints to which your IoT hub routes messages based on the routing rules. A maximum of 10 custom endpoints are allowed across all endpoint types for paid hubs and only 1 custom endpoint is allowed across all endpoint types for free hubs.
/// </summary>
class  RoutingEndpoints
    : public ModelBase
{
public:
    RoutingEndpoints();
    virtual ~RoutingEndpoints();

    /////////////////////////////////////////////
    /// ModelBase overrides

    void validate() override;

    web::json::value toJson() const override;
    void fromJson(web::json::value& json) override;

    void toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) const override;
    void fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& namePrefix) override;

    /////////////////////////////////////////////
    /// RoutingEndpoints members

    /// <summary>
    /// The list of Service Bus queue endpoints that IoT hub routes the messages to, based on the routing rules.
    /// </summary>
    std::vector<std::shared_ptr<RoutingServiceBusQueueEndpointProperties>>& getServiceBusQueues();
    bool serviceBusQueuesIsSet() const;
    void unsetServiceBusQueues();
    void setServiceBusQueues(std::vector<std::shared_ptr<RoutingServiceBusQueueEndpointProperties>> value);
    /// <summary>
    /// The list of Service Bus topic endpoints that the IoT hub routes the messages to, based on the routing rules.
    /// </summary>
    std::vector<std::shared_ptr<RoutingServiceBusTopicEndpointProperties>>& getServiceBusTopics();
    bool serviceBusTopicsIsSet() const;
    void unsetServiceBusTopics();
    void setServiceBusTopics(std::vector<std::shared_ptr<RoutingServiceBusTopicEndpointProperties>> value);
    /// <summary>
    /// The list of Event Hubs endpoints that IoT hub routes messages to, based on the routing rules. This list does not include the built-in Event Hubs endpoint.
    /// </summary>
    std::vector<std::shared_ptr<RoutingEventHubProperties>>& getEventHubs();
    bool eventHubsIsSet() const;
    void unsetEventHubs();
    void setEventHubs(std::vector<std::shared_ptr<RoutingEventHubProperties>> value);

protected:
    std::vector<std::shared_ptr<RoutingServiceBusQueueEndpointProperties>> m_ServiceBusQueues;
    bool m_ServiceBusQueuesIsSet;
    std::vector<std::shared_ptr<RoutingServiceBusTopicEndpointProperties>> m_ServiceBusTopics;
    bool m_ServiceBusTopicsIsSet;
    std::vector<std::shared_ptr<RoutingEventHubProperties>> m_EventHubs;
    bool m_EventHubsIsSet;
};

}
}
}
}

#endif /* RoutingEndpoints_H_ */
