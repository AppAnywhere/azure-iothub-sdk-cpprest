/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IotHubQuotaMetricInfo.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IotHubQuotaMetricInfo::IotHubQuotaMetricInfo()
{
    m_Name = U("");
    m_NameIsSet = false;
    m_CurrentValue = 0;
    m_CurrentValueIsSet = false;
    m_MaxValue = 0;
    m_MaxValueIsSet = false;
    
}

IotHubQuotaMetricInfo::~IotHubQuotaMetricInfo()
{
}

void IotHubQuotaMetricInfo::validate()
{
    // TODO: implement validation
}

web::json::value IotHubQuotaMetricInfo::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_NameIsSet)
    {
        val[U("Name")] = ModelBase::toJson(m_Name);
    }
    if(m_CurrentValueIsSet)
    {
        val[U("CurrentValue")] = ModelBase::toJson(m_CurrentValue);
    }
    if(m_MaxValueIsSet)
    {
        val[U("MaxValue")] = ModelBase::toJson(m_MaxValue);
    }
    

    return val;
}

void IotHubQuotaMetricInfo::fromJson(web::json::value& val)
{
    if(val.has_field(U("Name")))
    {
        setName(ModelBase::stringFromJson(val[U("Name")]));
        
    }
    if(val.has_field(U("CurrentValue")))
    {
        setCurrentValue(ModelBase::int64_tFromJson(val[U("CurrentValue")]));
    }
    if(val.has_field(U("MaxValue")))
    {
        setMaxValue(ModelBase::int64_tFromJson(val[U("MaxValue")]));
    }
    
}

void IotHubQuotaMetricInfo::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_NameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("Name"), m_Name));
        
    }
    if(m_CurrentValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("CurrentValue"), m_CurrentValue));
    }
    if(m_MaxValueIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("MaxValue"), m_MaxValue));
    }
    
}

void IotHubQuotaMetricInfo::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("Name")))
    {
        setName(ModelBase::stringFromHttpContent(multipart->getContent(U("Name"))));
        
    }
    if(multipart->hasContent(U("CurrentValue")))
    {
        setCurrentValue(ModelBase::int64_tFromHttpContent(multipart->getContent(U("CurrentValue"))));
    }
    if(multipart->hasContent(U("MaxValue")))
    {
        setMaxValue(ModelBase::int64_tFromHttpContent(multipart->getContent(U("MaxValue"))));
    }
    
}


utility::string_t IotHubQuotaMetricInfo::getName() const
{
    return m_Name;
}
void IotHubQuotaMetricInfo::setName(utility::string_t value)
{
    m_Name = value;
    m_NameIsSet = true;
}
bool IotHubQuotaMetricInfo::NameIsSet() const
{
    return m_NameIsSet;
}
void IotHubQuotaMetricInfo::unsetName()
{
    m_NameIsSet = false;
}
int64_t IotHubQuotaMetricInfo::getCurrentValue() const
{
    return m_CurrentValue;
}
void IotHubQuotaMetricInfo::setCurrentValue(int64_t value)
{
    m_CurrentValue = value;
    m_CurrentValueIsSet = true;
}
bool IotHubQuotaMetricInfo::CurrentValueIsSet() const
{
    return m_CurrentValueIsSet;
}
void IotHubQuotaMetricInfo::unsetCurrentValue()
{
    m_CurrentValueIsSet = false;
}
int64_t IotHubQuotaMetricInfo::getMaxValue() const
{
    return m_MaxValue;
}
void IotHubQuotaMetricInfo::setMaxValue(int64_t value)
{
    m_MaxValue = value;
    m_MaxValueIsSet = true;
}
bool IotHubQuotaMetricInfo::MaxValueIsSet() const
{
    return m_MaxValueIsSet;
}
void IotHubQuotaMetricInfo::unsetMaxValue()
{
    m_MaxValueIsSet = false;
}

}
}
}
}

