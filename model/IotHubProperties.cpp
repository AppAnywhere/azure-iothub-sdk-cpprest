/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IotHubProperties.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IotHubProperties::IotHubProperties()
{
    m_AuthorizationPoliciesIsSet = false;
    m_IpFilterRulesIsSet = false;
    m_ProvisioningState = U("");
    m_ProvisioningStateIsSet = false;
    m_HostName = U("");
    m_HostNameIsSet = false;
    m_EventHubEndpointsIsSet = false;
    m_RoutingIsSet = false;
    m_StorageEndpointsIsSet = false;
    m_MessagingEndpointsIsSet = false;
    m_EnableFileUploadNotifications = false;
    m_EnableFileUploadNotificationsIsSet = false;
    m_CloudToDeviceIsSet = false;
    m_Comments = U("");
    m_CommentsIsSet = false;
    m_OperationsMonitoringPropertiesIsSet = false;
    m_Features = U("");
    m_FeaturesIsSet = false;
}

IotHubProperties::~IotHubProperties()
{
}

void IotHubProperties::validate()
{
    // TODO: implement validation
}

web::json::value IotHubProperties::toJson() const
{
    web::json::value val = web::json::value::object();

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_AuthorizationPolicies )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("authorizationPolicies")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_IpFilterRules )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        if(jsonArray.size() > 0)
        {
            val[U("ipFilterRules")] = web::json::value::array(jsonArray);
        }
    }
    if(m_ProvisioningStateIsSet)
    {
        val[U("provisioningState")] = ModelBase::toJson(m_ProvisioningState);
    }
    if(m_HostNameIsSet)
    {
        val[U("hostName")] = ModelBase::toJson(m_HostName);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_EventHubEndpoints )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first());
            tmp[U("value")] = ModelBase::toJson(item.second());
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("eventHubEndpoints")] = web::json::value::array(jsonArray);
        }
    }
    if(m_RoutingIsSet)
    {
        val[U("routing")] = ModelBase::toJson(m_Routing);
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_StorageEndpoints )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first());
            tmp[U("value")] = ModelBase::toJson(item.second());
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("storageEndpoints")] = web::json::value::array(jsonArray);
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_MessagingEndpoints )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first());
            tmp[U("value")] = ModelBase::toJson(item.second());
            jsonArray.push_back(tmp);
        }
        if(jsonArray.size() > 0)
        {
            val[U("messagingEndpoints")] = web::json::value::array(jsonArray);
        }
    }
    if(m_EnableFileUploadNotificationsIsSet)
    {
        val[U("enableFileUploadNotifications")] = ModelBase::toJson(m_EnableFileUploadNotifications);
    }
    if(m_CloudToDeviceIsSet)
    {
        val[U("cloudToDevice")] = ModelBase::toJson(m_CloudToDevice);
    }
    if(m_CommentsIsSet)
    {
        val[U("comments")] = ModelBase::toJson(m_Comments);
    }
    if(m_OperationsMonitoringPropertiesIsSet)
    {
        val[U("operationsMonitoringProperties")] = ModelBase::toJson(m_OperationsMonitoringProperties);
    }
    if(m_FeaturesIsSet)
    {
        val[U("features")] = ModelBase::toJson(m_Features);
    }

    return val;
}

void IotHubProperties::fromJson(web::json::value& val)
{
    {
        m_AuthorizationPolicies.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("authorizationPolicies")))
        {
        for( auto& item : val[U("authorizationPolicies")].as_array() )
        {
            if(item.is_null())
            {
                m_AuthorizationPolicies.push_back( std::shared_ptr<SharedAccessSignatureAuthorizationRule>(nullptr) );
            }
            else
            {
                std::shared_ptr<SharedAccessSignatureAuthorizationRule> newItem(new SharedAccessSignatureAuthorizationRule());
                newItem->fromJson(item);
                m_AuthorizationPolicies.push_back( newItem );
            }
        }
        }
    }
    {
        m_IpFilterRules.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("ipFilterRules")))
        {
        for( auto& item : val[U("ipFilterRules")].as_array() )
        {
            if(item.is_null())
            {
                m_IpFilterRules.push_back( std::shared_ptr<IpFilterRule>(nullptr) );
            }
            else
            {
                std::shared_ptr<IpFilterRule> newItem(new IpFilterRule());
                newItem->fromJson(item);
                m_IpFilterRules.push_back( newItem );
            }
        }
        }
    }
    if(val.has_field(U("provisioningState")))
    {
        setProvisioningState(ModelBase::stringFromJson(val[U("provisioningState")]));
    }
    if(val.has_field(U("hostName")))
    {
        setHostName(ModelBase::stringFromJson(val[U("hostName")]));
    }
    {
        m_EventHubEndpoints.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("eventHubEndpoints")))
        {
        for( auto& item : val[U("eventHubEndpoints")].as_array() )
        {  
            utility::string_t key = "";
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_EventHubEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;EventHubProperties&gt;>( key, std::shared_ptr<EventHubProperties>(nullptr) ));
            }
            else
            {
                std::shared_ptr<EventHubProperties> newItem(new EventHubProperties());
                newItem->fromJson(item[U("value")]);
                m_EventHubEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;EventHubProperties&gt;>( key, newItem ));
            }
        }
        }
    }
    if(val.has_field(U("routing")))
    {
        if(!val[U("routing")].is_null())
        {
            std::shared_ptr<RoutingProperties> newItem(new RoutingProperties());
            newItem->fromJson(val[U("routing")]);
            setRouting( newItem );
        }
    }
    {
        m_StorageEndpoints.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("storageEndpoints")))
        {
        for( auto& item : val[U("storageEndpoints")].as_array() )
        {  
            utility::string_t key = "";
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_StorageEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;StorageEndpointProperties&gt;>( key, std::shared_ptr<StorageEndpointProperties>(nullptr) ));
            }
            else
            {
                std::shared_ptr<StorageEndpointProperties> newItem(new StorageEndpointProperties());
                newItem->fromJson(item[U("value")]);
                m_StorageEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;StorageEndpointProperties&gt;>( key, newItem ));
            }
        }
        }
    }
    {
        m_MessagingEndpoints.clear();
        std::vector<web::json::value> jsonArray;
        if(val.has_field(U("messagingEndpoints")))
        {
        for( auto& item : val[U("messagingEndpoints")].as_array() )
        {  
            utility::string_t key = "";
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_MessagingEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;MessagingEndpointProperties&gt;>( key, std::shared_ptr<MessagingEndpointProperties>(nullptr) ));
            }
            else
            {
                std::shared_ptr<MessagingEndpointProperties> newItem(new MessagingEndpointProperties());
                newItem->fromJson(item[U("value")]);
                m_MessagingEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;MessagingEndpointProperties&gt;>( key, newItem ));
            }
        }
        }
    }
    if(val.has_field(U("enableFileUploadNotifications")))
    {
        setEnableFileUploadNotifications(ModelBase::boolFromJson(val[U("enableFileUploadNotifications")]));
    }
    if(val.has_field(U("cloudToDevice")))
    {
        if(!val[U("cloudToDevice")].is_null())
        {
            std::shared_ptr<CloudToDeviceProperties> newItem(new CloudToDeviceProperties());
            newItem->fromJson(val[U("cloudToDevice")]);
            setCloudToDevice( newItem );
        }
    }
    if(val.has_field(U("comments")))
    {
        setComments(ModelBase::stringFromJson(val[U("comments")]));
    }
    if(val.has_field(U("operationsMonitoringProperties")))
    {
        if(!val[U("operationsMonitoringProperties")].is_null())
        {
            std::shared_ptr<OperationsMonitoringProperties> newItem(new OperationsMonitoringProperties());
            newItem->fromJson(val[U("operationsMonitoringProperties")]);
            setOperationsMonitoringProperties( newItem );
        }
    }
    if(val.has_field(U("features")))
    {
        setFeatures(ModelBase::stringFromJson(val[U("features")]));
    }
}

void IotHubProperties::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_AuthorizationPolicies )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("authorizationPolicies"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_IpFilterRules )
        {
            jsonArray.push_back(ModelBase::toJson(item));
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("ipFilterRules"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_ProvisioningStateIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("provisioningState"), m_ProvisioningState));
        
    }
    if(m_HostNameIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("hostName"), m_HostName));
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_EventHubEndpoints )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first());
            tmp[U("value")] = ModelBase::toJson(item.second());
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("eventHubEndpoints"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_RoutingIsSet)
    {
        if (m_Routing.get())
        {
            m_Routing->toMultipart(multipart, U("routing."));
        }
        
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_StorageEndpoints )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first());
            tmp[U("value")] = ModelBase::toJson(item.second());
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("storageEndpoints"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    {
        std::vector<web::json::value> jsonArray;
        for( auto& item : m_MessagingEndpoints )
        {
            web::json::value tmp = web::json::value::object();
            tmp[U("key")] = ModelBase::toJson(item.first());
            tmp[U("value")] = ModelBase::toJson(item.second());
            jsonArray.push_back(tmp);
        }
        
        if(jsonArray.size() > 0)
        {
            multipart->add(ModelBase::toHttpContent(namePrefix + U("messagingEndpoints"), web::json::value::array(jsonArray), U("application/json")));
        }
    }
    if(m_EnableFileUploadNotificationsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("enableFileUploadNotifications"), m_EnableFileUploadNotifications));
    }
    if(m_CloudToDeviceIsSet)
    {
        if (m_CloudToDevice.get())
        {
            m_CloudToDevice->toMultipart(multipart, U("cloudToDevice."));
        }
        
    }
    if(m_CommentsIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("comments"), m_Comments));
        
    }
    if(m_OperationsMonitoringPropertiesIsSet)
    {
        if (m_OperationsMonitoringProperties.get())
        {
            m_OperationsMonitoringProperties->toMultipart(multipart, U("operationsMonitoringProperties."));
        }
        
    }
    if(m_FeaturesIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("features"), m_Features));
        
    }
}

void IotHubProperties::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    {
        m_AuthorizationPolicies.clear();
        if(multipart->hasContent(U("authorizationPolicies")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("authorizationPolicies"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_AuthorizationPolicies.push_back( std::shared_ptr<SharedAccessSignatureAuthorizationRule>(nullptr) );
            }
            else
            {
                std::shared_ptr<SharedAccessSignatureAuthorizationRule> newItem(new SharedAccessSignatureAuthorizationRule());
                newItem->fromJson(item);
                m_AuthorizationPolicies.push_back( newItem );
            }
        }
        }
    }
    {
        m_IpFilterRules.clear();
        if(multipart->hasContent(U("ipFilterRules")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("ipFilterRules"))));
        for( auto& item : jsonArray.as_array() )
        {
            if(item.is_null())
            {
                m_IpFilterRules.push_back( std::shared_ptr<IpFilterRule>(nullptr) );
            }
            else
            {
                std::shared_ptr<IpFilterRule> newItem(new IpFilterRule());
                newItem->fromJson(item);
                m_IpFilterRules.push_back( newItem );
            }
        }
        }
    }
    if(multipart->hasContent(U("provisioningState")))
    {
        setProvisioningState(ModelBase::stringFromHttpContent(multipart->getContent(U("provisioningState"))));
    }
    if(multipart->hasContent(U("hostName")))
    {
        setHostName(ModelBase::stringFromHttpContent(multipart->getContent(U("hostName"))));
    }
    {
        m_EventHubEndpoints.clear();
        if(multipart->hasContent(U("eventHubEndpoints")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("eventHubEndpoints"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key = "";
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_EventHubEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;EventHubProperties&gt;>( key, std::shared_ptr<EventHubProperties>(nullptr) ));
            }
            else
            {
                std::shared_ptr<EventHubProperties> newItem(new EventHubProperties());
                newItem->fromJson(item[U("value")]);
                m_EventHubEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;EventHubProperties&gt;>( key, newItem ));
            }
        }
        }
    }
    if(multipart->hasContent(U("routing")))
    {
        if(multipart->hasContent(U("routing")))
        {
            std::shared_ptr<RoutingProperties> newItem(new RoutingProperties());
            newItem->fromMultiPart(multipart, U("routing."));
            setRouting( newItem );
        }
    }
    {
        m_StorageEndpoints.clear();
        if(multipart->hasContent(U("storageEndpoints")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("storageEndpoints"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key = "";
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_StorageEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;StorageEndpointProperties&gt;>( key, std::shared_ptr<StorageEndpointProperties>(nullptr) ));
            }
            else
            {
                std::shared_ptr<StorageEndpointProperties> newItem(new StorageEndpointProperties());
                newItem->fromJson(item[U("value")]);
                m_StorageEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;StorageEndpointProperties&gt;>( key, newItem ));
            }
        }
        }
    }
    {
        m_MessagingEndpoints.clear();
        if(multipart->hasContent(U("messagingEndpoints")))
        {

        web::json::value jsonArray = web::json::value::parse(ModelBase::stringFromHttpContent(multipart->getContent(U("messagingEndpoints"))));
        for( auto& item : jsonArray.as_array() )
        {
            utility::string_t key = "";
            if(item.has_field(U("key")))
            {
                key = ModelBase::stringFromJson(item[U("key")]);
            }
            if(item.is_null())
            {
                m_MessagingEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;MessagingEndpointProperties&gt;>( key, std::shared_ptr<MessagingEndpointProperties>(nullptr) ));
            }
            else
            {
                std::shared_ptr<MessagingEndpointProperties> newItem(new MessagingEndpointProperties());
                newItem->fromJson(item[U("value")]);
                m_MessagingEndpoints.insert(std::pair<utility::string_t,std::shared_ptr&lt;MessagingEndpointProperties&gt;>( key, newItem ));
            }
        }
        }
    }
    if(multipart->hasContent(U("enableFileUploadNotifications")))
    {
        setEnableFileUploadNotifications(ModelBase::boolFromHttpContent(multipart->getContent(U("enableFileUploadNotifications"))));
    }
    if(multipart->hasContent(U("cloudToDevice")))
    {
        if(multipart->hasContent(U("cloudToDevice")))
        {
            std::shared_ptr<CloudToDeviceProperties> newItem(new CloudToDeviceProperties());
            newItem->fromMultiPart(multipart, U("cloudToDevice."));
            setCloudToDevice( newItem );
        }
    }
    if(multipart->hasContent(U("comments")))
    {
        setComments(ModelBase::stringFromHttpContent(multipart->getContent(U("comments"))));
    }
    if(multipart->hasContent(U("operationsMonitoringProperties")))
    {
        if(multipart->hasContent(U("operationsMonitoringProperties")))
        {
            std::shared_ptr<OperationsMonitoringProperties> newItem(new OperationsMonitoringProperties());
            newItem->fromMultiPart(multipart, U("operationsMonitoringProperties."));
            setOperationsMonitoringProperties( newItem );
        }
    }
    if(multipart->hasContent(U("features")))
    {
        setFeatures(ModelBase::stringFromHttpContent(multipart->getContent(U("features"))));
    }
}

std::vector<std::shared_ptr<SharedAccessSignatureAuthorizationRule>>& IotHubProperties::getAuthorizationPolicies()
{
    return m_AuthorizationPolicies;
}

void IotHubProperties::setAuthorizationPolicies(std::vector<std::shared_ptr<SharedAccessSignatureAuthorizationRule>> value)
{
    m_AuthorizationPolicies = value;
    m_AuthorizationPoliciesIsSet = true;
}
bool IotHubProperties::authorizationPoliciesIsSet() const
{
    return m_AuthorizationPoliciesIsSet;
}

void IotHubProperties::unsetAuthorizationPolicies()
{
    m_AuthorizationPoliciesIsSet = false;
}

std::vector<std::shared_ptr<IpFilterRule>>& IotHubProperties::getIpFilterRules()
{
    return m_IpFilterRules;
}

void IotHubProperties::setIpFilterRules(std::vector<std::shared_ptr<IpFilterRule>> value)
{
    m_IpFilterRules = value;
    m_IpFilterRulesIsSet = true;
}
bool IotHubProperties::ipFilterRulesIsSet() const
{
    return m_IpFilterRulesIsSet;
}

void IotHubProperties::unsetIpFilterRules()
{
    m_IpFilterRulesIsSet = false;
}

utility::string_t IotHubProperties::getProvisioningState() const
{
    return m_ProvisioningState;
}


void IotHubProperties::setProvisioningState(utility::string_t value)
{
    m_ProvisioningState = value;
    m_ProvisioningStateIsSet = true;
}
bool IotHubProperties::provisioningStateIsSet() const
{
    return m_ProvisioningStateIsSet;
}

void IotHubProperties::unsetProvisioningState()
{
    m_ProvisioningStateIsSet = false;
}

utility::string_t IotHubProperties::getHostName() const
{
    return m_HostName;
}


void IotHubProperties::setHostName(utility::string_t value)
{
    m_HostName = value;
    m_HostNameIsSet = true;
}
bool IotHubProperties::hostNameIsSet() const
{
    return m_HostNameIsSet;
}

void IotHubProperties::unsetHostName()
{
    m_HostNameIsSet = false;
}

std::map<utility::string_t, std::shared_ptr<EventHubProperties>>& IotHubProperties::getEventHubEndpoints()
{
    return m_EventHubEndpoints;
}

void IotHubProperties::setEventHubEndpoints(std::map<utility::string_t, std::shared_ptr<EventHubProperties>> value)
{
    m_EventHubEndpoints = value;
    m_EventHubEndpointsIsSet = true;
}
bool IotHubProperties::eventHubEndpointsIsSet() const
{
    return m_EventHubEndpointsIsSet;
}

void IotHubProperties::unsetEventHubEndpoints()
{
    m_EventHubEndpointsIsSet = false;
}

std::shared_ptr<RoutingProperties> IotHubProperties::getRouting() const
{
    return m_Routing;
}


void IotHubProperties::setRouting(std::shared_ptr<RoutingProperties> value)
{
    m_Routing = value;
    m_RoutingIsSet = true;
}
bool IotHubProperties::routingIsSet() const
{
    return m_RoutingIsSet;
}

void IotHubProperties::unsetRouting()
{
    m_RoutingIsSet = false;
}

std::map<utility::string_t, std::shared_ptr<StorageEndpointProperties>>& IotHubProperties::getStorageEndpoints()
{
    return m_StorageEndpoints;
}

void IotHubProperties::setStorageEndpoints(std::map<utility::string_t, std::shared_ptr<StorageEndpointProperties>> value)
{
    m_StorageEndpoints = value;
    m_StorageEndpointsIsSet = true;
}
bool IotHubProperties::storageEndpointsIsSet() const
{
    return m_StorageEndpointsIsSet;
}

void IotHubProperties::unsetStorageEndpoints()
{
    m_StorageEndpointsIsSet = false;
}

std::map<utility::string_t, std::shared_ptr<MessagingEndpointProperties>>& IotHubProperties::getMessagingEndpoints()
{
    return m_MessagingEndpoints;
}

void IotHubProperties::setMessagingEndpoints(std::map<utility::string_t, std::shared_ptr<MessagingEndpointProperties>> value)
{
    m_MessagingEndpoints = value;
    m_MessagingEndpointsIsSet = true;
}
bool IotHubProperties::messagingEndpointsIsSet() const
{
    return m_MessagingEndpointsIsSet;
}

void IotHubProperties::unsetMessagingEndpoints()
{
    m_MessagingEndpointsIsSet = false;
}

bool IotHubProperties::getEnableFileUploadNotifications() const
{
    return m_EnableFileUploadNotifications;
}


void IotHubProperties::setEnableFileUploadNotifications(bool value)
{
    m_EnableFileUploadNotifications = value;
    m_EnableFileUploadNotificationsIsSet = true;
}
bool IotHubProperties::enableFileUploadNotificationsIsSet() const
{
    return m_EnableFileUploadNotificationsIsSet;
}

void IotHubProperties::unsetEnableFileUploadNotifications()
{
    m_EnableFileUploadNotificationsIsSet = false;
}

std::shared_ptr<CloudToDeviceProperties> IotHubProperties::getCloudToDevice() const
{
    return m_CloudToDevice;
}


void IotHubProperties::setCloudToDevice(std::shared_ptr<CloudToDeviceProperties> value)
{
    m_CloudToDevice = value;
    m_CloudToDeviceIsSet = true;
}
bool IotHubProperties::cloudToDeviceIsSet() const
{
    return m_CloudToDeviceIsSet;
}

void IotHubProperties::unsetCloudToDevice()
{
    m_CloudToDeviceIsSet = false;
}

utility::string_t IotHubProperties::getComments() const
{
    return m_Comments;
}


void IotHubProperties::setComments(utility::string_t value)
{
    m_Comments = value;
    m_CommentsIsSet = true;
}
bool IotHubProperties::commentsIsSet() const
{
    return m_CommentsIsSet;
}

void IotHubProperties::unsetComments()
{
    m_CommentsIsSet = false;
}

std::shared_ptr<OperationsMonitoringProperties> IotHubProperties::getOperationsMonitoringProperties() const
{
    return m_OperationsMonitoringProperties;
}


void IotHubProperties::setOperationsMonitoringProperties(std::shared_ptr<OperationsMonitoringProperties> value)
{
    m_OperationsMonitoringProperties = value;
    m_OperationsMonitoringPropertiesIsSet = true;
}
bool IotHubProperties::operationsMonitoringPropertiesIsSet() const
{
    return m_OperationsMonitoringPropertiesIsSet;
}

void IotHubProperties::unsetOperationsMonitoringProperties()
{
    m_OperationsMonitoringPropertiesIsSet = false;
}

utility::string_t IotHubProperties::getFeatures() const
{
    return m_Features;
}


void IotHubProperties::setFeatures(utility::string_t value)
{
    m_Features = value;
    m_FeaturesIsSet = true;
}
bool IotHubProperties::featuresIsSet() const
{
    return m_FeaturesIsSet;
}

void IotHubProperties::unsetFeatures()
{
    m_FeaturesIsSet = false;
}

}
}
}
}

