/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "Inline_response_200_9_value.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

Inline_response_200_9_value::Inline_response_200_9_value()
{
    m_KeyName = U("");
    m_PrimaryKey = U("");
    m_PrimaryKeyIsSet = false;
    m_SecondaryKey = U("");
    m_SecondaryKeyIsSet = false;
    m_Rights = U("");
    
}

Inline_response_200_9_value::~Inline_response_200_9_value()
{
}

void Inline_response_200_9_value::validate()
{
    // TODO: implement validation
}

web::json::value Inline_response_200_9_value::toJson() const
{
    web::json::value val = web::json::value::object();

    val[U("keyName")] = ModelBase::toJson(m_KeyName);
    if(m_PrimaryKeyIsSet)
    {
        val[U("primaryKey")] = ModelBase::toJson(m_PrimaryKey);
    }
    if(m_SecondaryKeyIsSet)
    {
        val[U("secondaryKey")] = ModelBase::toJson(m_SecondaryKey);
    }
    val[U("rights")] = ModelBase::toJson(m_Rights);
    

    return val;
}

void Inline_response_200_9_value::fromJson(web::json::value& val)
{
    setKeyName(ModelBase::stringFromJson(val[U("keyName")]));
    if(val.has_field(U("primaryKey")))
    {
        setPrimaryKey(ModelBase::stringFromJson(val[U("primaryKey")]));
        
    }
    if(val.has_field(U("secondaryKey")))
    {
        setSecondaryKey(ModelBase::stringFromJson(val[U("secondaryKey")]));
        
    }
    setRights(ModelBase::stringFromJson(val[U("rights")]));
    
}

void Inline_response_200_9_value::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    multipart->add(ModelBase::toHttpContent(namePrefix + U("keyName"), m_KeyName));
    if(m_PrimaryKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("primaryKey"), m_PrimaryKey));
        
    }
    if(m_SecondaryKeyIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("secondaryKey"), m_SecondaryKey));
        
    }
    multipart->add(ModelBase::toHttpContent(namePrefix + U("rights"), m_Rights));
    
}

void Inline_response_200_9_value::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    setKeyName(ModelBase::stringFromHttpContent(multipart->getContent(U("keyName"))));
    if(multipart->hasContent(U("primaryKey")))
    {
        setPrimaryKey(ModelBase::stringFromHttpContent(multipart->getContent(U("primaryKey"))));
        
    }
    if(multipart->hasContent(U("secondaryKey")))
    {
        setSecondaryKey(ModelBase::stringFromHttpContent(multipart->getContent(U("secondaryKey"))));
        
    }
    setRights(ModelBase::stringFromHttpContent(multipart->getContent(U("rights"))));
    
}


utility::string_t Inline_response_200_9_value::getKeyName() const
{
    return m_KeyName;
}
void Inline_response_200_9_value::setKeyName(utility::string_t value)
{
    m_KeyName = value;
    
}
utility::string_t Inline_response_200_9_value::getPrimaryKey() const
{
    return m_PrimaryKey;
}
void Inline_response_200_9_value::setPrimaryKey(utility::string_t value)
{
    m_PrimaryKey = value;
    m_PrimaryKeyIsSet = true;
}
bool Inline_response_200_9_value::primaryKeyIsSet() const
{
    return m_PrimaryKeyIsSet;
}
void Inline_response_200_9_value::unsetPrimaryKey()
{
    m_PrimaryKeyIsSet = false;
}
utility::string_t Inline_response_200_9_value::getSecondaryKey() const
{
    return m_SecondaryKey;
}
void Inline_response_200_9_value::setSecondaryKey(utility::string_t value)
{
    m_SecondaryKey = value;
    m_SecondaryKeyIsSet = true;
}
bool Inline_response_200_9_value::secondaryKeyIsSet() const
{
    return m_SecondaryKeyIsSet;
}
void Inline_response_200_9_value::unsetSecondaryKey()
{
    m_SecondaryKeyIsSet = false;
}
utility::string_t Inline_response_200_9_value::getRights() const
{
    return m_Rights;
}
void Inline_response_200_9_value::setRights(utility::string_t value)
{
    m_Rights = value;
    
}

}
}
}
}

