/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "JobResponse.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

JobResponse::JobResponse()
{
    m_JobId = U("");
    m_JobIdIsSet = false;
    m_StartTimeUtc = U("");
    m_StartTimeUtcIsSet = false;
    m_EndTimeUtc = U("");
    m_EndTimeUtcIsSet = false;
    m_Type = U("");
    m_TypeIsSet = false;
    m_Status = U("");
    m_StatusIsSet = false;
    m_FailureReason = U("");
    m_FailureReasonIsSet = false;
    m_StatusMessage = U("");
    m_StatusMessageIsSet = false;
    m_ParentJobId = U("");
    m_ParentJobIdIsSet = false;
    
}

JobResponse::~JobResponse()
{
}

void JobResponse::validate()
{
    // TODO: implement validation
}

web::json::value JobResponse::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_JobIdIsSet)
    {
        val[U("jobId")] = ModelBase::toJson(m_JobId);
    }
    if(m_StartTimeUtcIsSet)
    {
        val[U("startTimeUtc")] = ModelBase::toJson(m_StartTimeUtc);
    }
    if(m_EndTimeUtcIsSet)
    {
        val[U("endTimeUtc")] = ModelBase::toJson(m_EndTimeUtc);
    }
    if(m_TypeIsSet)
    {
        val[U("type")] = ModelBase::toJson(m_Type);
    }
    if(m_StatusIsSet)
    {
        val[U("status")] = ModelBase::toJson(m_Status);
    }
    if(m_FailureReasonIsSet)
    {
        val[U("failureReason")] = ModelBase::toJson(m_FailureReason);
    }
    if(m_StatusMessageIsSet)
    {
        val[U("statusMessage")] = ModelBase::toJson(m_StatusMessage);
    }
    if(m_ParentJobIdIsSet)
    {
        val[U("parentJobId")] = ModelBase::toJson(m_ParentJobId);
    }
    

    return val;
}

void JobResponse::fromJson(web::json::value& val)
{
    if(val.has_field(U("jobId")))
    {
        setJobId(ModelBase::stringFromJson(val[U("jobId")]));
        
    }
    if(val.has_field(U("startTimeUtc")))
    {
        setStartTimeUtc(ModelBase::stringFromJson(val[U("startTimeUtc")]));
        
    }
    if(val.has_field(U("endTimeUtc")))
    {
        setEndTimeUtc(ModelBase::stringFromJson(val[U("endTimeUtc")]));
        
    }
    if(val.has_field(U("type")))
    {
        setType(ModelBase::stringFromJson(val[U("type")]));
        
    }
    if(val.has_field(U("status")))
    {
        setStatus(ModelBase::stringFromJson(val[U("status")]));
        
    }
    if(val.has_field(U("failureReason")))
    {
        setFailureReason(ModelBase::stringFromJson(val[U("failureReason")]));
        
    }
    if(val.has_field(U("statusMessage")))
    {
        setStatusMessage(ModelBase::stringFromJson(val[U("statusMessage")]));
        
    }
    if(val.has_field(U("parentJobId")))
    {
        setParentJobId(ModelBase::stringFromJson(val[U("parentJobId")]));
        
    }
    
}

void JobResponse::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_JobIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("jobId"), m_JobId));
        
    }
    if(m_StartTimeUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("startTimeUtc"), m_StartTimeUtc));
        
    }
    if(m_EndTimeUtcIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("endTimeUtc"), m_EndTimeUtc));
        
    }
    if(m_TypeIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("type"), m_Type));
        
    }
    if(m_StatusIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("status"), m_Status));
        
    }
    if(m_FailureReasonIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("failureReason"), m_FailureReason));
        
    }
    if(m_StatusMessageIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("statusMessage"), m_StatusMessage));
        
    }
    if(m_ParentJobIdIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("parentJobId"), m_ParentJobId));
        
    }
    
}

void JobResponse::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("jobId")))
    {
        setJobId(ModelBase::stringFromHttpContent(multipart->getContent(U("jobId"))));
        
    }
    if(multipart->hasContent(U("startTimeUtc")))
    {
        setStartTimeUtc(ModelBase::stringFromHttpContent(multipart->getContent(U("startTimeUtc"))));
        
    }
    if(multipart->hasContent(U("endTimeUtc")))
    {
        setEndTimeUtc(ModelBase::stringFromHttpContent(multipart->getContent(U("endTimeUtc"))));
        
    }
    if(multipart->hasContent(U("type")))
    {
        setType(ModelBase::stringFromHttpContent(multipart->getContent(U("type"))));
        
    }
    if(multipart->hasContent(U("status")))
    {
        setStatus(ModelBase::stringFromHttpContent(multipart->getContent(U("status"))));
        
    }
    if(multipart->hasContent(U("failureReason")))
    {
        setFailureReason(ModelBase::stringFromHttpContent(multipart->getContent(U("failureReason"))));
        
    }
    if(multipart->hasContent(U("statusMessage")))
    {
        setStatusMessage(ModelBase::stringFromHttpContent(multipart->getContent(U("statusMessage"))));
        
    }
    if(multipart->hasContent(U("parentJobId")))
    {
        setParentJobId(ModelBase::stringFromHttpContent(multipart->getContent(U("parentJobId"))));
        
    }
    
}


utility::string_t JobResponse::getJobId() const
{
    return m_JobId;
}
void JobResponse::setJobId(utility::string_t value)
{
    m_JobId = value;
    m_JobIdIsSet = true;
}
bool JobResponse::jobIdIsSet() const
{
    return m_JobIdIsSet;
}
void JobResponse::unsetJobId()
{
    m_JobIdIsSet = false;
}
utility::string_t JobResponse::getStartTimeUtc() const
{
    return m_StartTimeUtc;
}
void JobResponse::setStartTimeUtc(utility::string_t value)
{
    m_StartTimeUtc = value;
    m_StartTimeUtcIsSet = true;
}
bool JobResponse::startTimeUtcIsSet() const
{
    return m_StartTimeUtcIsSet;
}
void JobResponse::unsetStartTimeUtc()
{
    m_StartTimeUtcIsSet = false;
}
utility::string_t JobResponse::getEndTimeUtc() const
{
    return m_EndTimeUtc;
}
void JobResponse::setEndTimeUtc(utility::string_t value)
{
    m_EndTimeUtc = value;
    m_EndTimeUtcIsSet = true;
}
bool JobResponse::endTimeUtcIsSet() const
{
    return m_EndTimeUtcIsSet;
}
void JobResponse::unsetEndTimeUtc()
{
    m_EndTimeUtcIsSet = false;
}
utility::string_t JobResponse::getType() const
{
    return m_Type;
}
void JobResponse::setType(utility::string_t value)
{
    m_Type = value;
    m_TypeIsSet = true;
}
bool JobResponse::typeIsSet() const
{
    return m_TypeIsSet;
}
void JobResponse::unsetType()
{
    m_TypeIsSet = false;
}
utility::string_t JobResponse::getStatus() const
{
    return m_Status;
}
void JobResponse::setStatus(utility::string_t value)
{
    m_Status = value;
    m_StatusIsSet = true;
}
bool JobResponse::statusIsSet() const
{
    return m_StatusIsSet;
}
void JobResponse::unsetStatus()
{
    m_StatusIsSet = false;
}
utility::string_t JobResponse::getFailureReason() const
{
    return m_FailureReason;
}
void JobResponse::setFailureReason(utility::string_t value)
{
    m_FailureReason = value;
    m_FailureReasonIsSet = true;
}
bool JobResponse::failureReasonIsSet() const
{
    return m_FailureReasonIsSet;
}
void JobResponse::unsetFailureReason()
{
    m_FailureReasonIsSet = false;
}
utility::string_t JobResponse::getStatusMessage() const
{
    return m_StatusMessage;
}
void JobResponse::setStatusMessage(utility::string_t value)
{
    m_StatusMessage = value;
    m_StatusMessageIsSet = true;
}
bool JobResponse::statusMessageIsSet() const
{
    return m_StatusMessageIsSet;
}
void JobResponse::unsetStatusMessage()
{
    m_StatusMessageIsSet = false;
}
utility::string_t JobResponse::getParentJobId() const
{
    return m_ParentJobId;
}
void JobResponse::setParentJobId(utility::string_t value)
{
    m_ParentJobId = value;
    m_ParentJobIdIsSet = true;
}
bool JobResponse::parentJobIdIsSet() const
{
    return m_ParentJobIdIsSet;
}
void JobResponse::unsetParentJobId()
{
    m_ParentJobIdIsSet = false;
}

}
}
}
}

