/**
 * iotHubClient
 * Use this API to manage the IoT hubs in your Azure subscription.
 *
 * OpenAPI spec version: 2017-01-19
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */



#include "IotHubProperties_cloudToDevice.h"

namespace io {
namespace swagger {
namespace client {
namespace model {

IotHubProperties_cloudToDevice::IotHubProperties_cloudToDevice()
{
    m_MaxDeliveryCount = 0;
    m_MaxDeliveryCountIsSet = false;
    m_DefaultTtlAsIso8601 = U("");
    m_DefaultTtlAsIso8601IsSet = false;
    m_FeedbackIsSet = false;
    
}

IotHubProperties_cloudToDevice::~IotHubProperties_cloudToDevice()
{
}

void IotHubProperties_cloudToDevice::validate()
{
    // TODO: implement validation
}

web::json::value IotHubProperties_cloudToDevice::toJson() const
{
    web::json::value val = web::json::value::object();

    if(m_MaxDeliveryCountIsSet)
    {
        val[U("maxDeliveryCount")] = ModelBase::toJson(m_MaxDeliveryCount);
    }
    if(m_DefaultTtlAsIso8601IsSet)
    {
        val[U("defaultTtlAsIso8601")] = ModelBase::toJson(m_DefaultTtlAsIso8601);
    }
    if(m_FeedbackIsSet)
    {
        val[U("feedback")] = ModelBase::toJson(m_Feedback);
    }
    

    return val;
}

void IotHubProperties_cloudToDevice::fromJson(web::json::value& val)
{
    if(val.has_field(U("maxDeliveryCount")))
    {
        setMaxDeliveryCount(ModelBase::int32_tFromJson(val[U("maxDeliveryCount")]));
    }
    if(val.has_field(U("defaultTtlAsIso8601")))
    {
        setDefaultTtlAsIso8601(ModelBase::stringFromJson(val[U("defaultTtlAsIso8601")]));
        
    }
    if(val.has_field(U("feedback")))
    {
        if(!val[U("feedback")].is_null())
        {
            std::shared_ptr<IotHubProperties_cloudToDevice_feedback> newItem(new IotHubProperties_cloudToDevice_feedback());
            newItem->fromJson(val[U("feedback")]);
            setFeedback( newItem );
        }
        
    }
    
}

void IotHubProperties_cloudToDevice::toMultipart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix) const
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(m_MaxDeliveryCountIsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("maxDeliveryCount"), m_MaxDeliveryCount));
    }
    if(m_DefaultTtlAsIso8601IsSet)
    {
        multipart->add(ModelBase::toHttpContent(namePrefix + U("defaultTtlAsIso8601"), m_DefaultTtlAsIso8601));
        
    }
    if(m_FeedbackIsSet)
    {
        if (m_Feedback.get())
        {
            m_Feedback->toMultipart(multipart, U("feedback."));
        }
        
    }
    
}

void IotHubProperties_cloudToDevice::fromMultiPart(std::shared_ptr<MultipartFormData> multipart, const utility::string_t& prefix)
{
    utility::string_t namePrefix = prefix;
    if(namePrefix.size() > 0 && namePrefix[namePrefix.size() - 1] != U('.'))
    {
        namePrefix += U(".");
    }

    if(multipart->hasContent(U("maxDeliveryCount")))
    {
        setMaxDeliveryCount(ModelBase::int32_tFromHttpContent(multipart->getContent(U("maxDeliveryCount"))));
    }
    if(multipart->hasContent(U("defaultTtlAsIso8601")))
    {
        setDefaultTtlAsIso8601(ModelBase::stringFromHttpContent(multipart->getContent(U("defaultTtlAsIso8601"))));
        
    }
    if(multipart->hasContent(U("feedback")))
    {
        if(multipart->hasContent(U("feedback")))
        {
            std::shared_ptr<IotHubProperties_cloudToDevice_feedback> newItem(new IotHubProperties_cloudToDevice_feedback());
            newItem->fromMultiPart(multipart, U("feedback."));
            setFeedback( newItem );
        }
        
    }
    
}


int32_t IotHubProperties_cloudToDevice::getMaxDeliveryCount() const
{
    return m_MaxDeliveryCount;
}
void IotHubProperties_cloudToDevice::setMaxDeliveryCount(int32_t value)
{
    m_MaxDeliveryCount = value;
    m_MaxDeliveryCountIsSet = true;
}
bool IotHubProperties_cloudToDevice::maxDeliveryCountIsSet() const
{
    return m_MaxDeliveryCountIsSet;
}
void IotHubProperties_cloudToDevice::unsetMaxDeliveryCount()
{
    m_MaxDeliveryCountIsSet = false;
}
utility::string_t IotHubProperties_cloudToDevice::getDefaultTtlAsIso8601() const
{
    return m_DefaultTtlAsIso8601;
}
void IotHubProperties_cloudToDevice::setDefaultTtlAsIso8601(utility::string_t value)
{
    m_DefaultTtlAsIso8601 = value;
    m_DefaultTtlAsIso8601IsSet = true;
}
bool IotHubProperties_cloudToDevice::defaultTtlAsIso8601IsSet() const
{
    return m_DefaultTtlAsIso8601IsSet;
}
void IotHubProperties_cloudToDevice::unsetDefaultTtlAsIso8601()
{
    m_DefaultTtlAsIso8601IsSet = false;
}
std::shared_ptr<IotHubProperties_cloudToDevice_feedback> IotHubProperties_cloudToDevice::getFeedback() const
{
    return m_Feedback;
}
void IotHubProperties_cloudToDevice::setFeedback(std::shared_ptr<IotHubProperties_cloudToDevice_feedback> value)
{
    m_Feedback = value;
    m_FeedbackIsSet = true;
}
bool IotHubProperties_cloudToDevice::feedbackIsSet() const
{
    return m_FeedbackIsSet;
}
void IotHubProperties_cloudToDevice::unsetFeedback()
{
    m_FeedbackIsSet = false;
}

}
}
}
}

